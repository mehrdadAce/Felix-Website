@model FelixWebsite.Core.Models.ActionForm
@using FelixWebsite.Core.App_GlobalResources
@{
    List<string> modelNames = new List<string>();
}

@using (Html.BeginUmbracoForm("SubmitForm", "Action", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Type)
    <div class="modal-body">
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    @Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "voornaam" } })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    @Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "achternaam" } })
                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "e-mail" } })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    <input onfocus="(this.type='datetime-local')" onblur="(this.type='text')" class="form-control" placeholder="Selecteer starttijd">
                </div>
                <div class="col-md-6">
                    <input onfocus="(this.type='datetime-local')" onblur="(this.type='text')" class="form-control" placeholder="Selecteer endtijd">
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    @Html.EditorFor(m => m.Phone, new { htmlAttributes = new { @class = "form-control", placeholder = "telefoonnummer of gsm-nummer" } })
                    @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @if (Model.Page is BusinessCombined)
        {
            List<BusinessBrand> listOfBusinesses = Model.Page.OfType<BusinessCombined>().BusinessItems.OfType<BusinessBrand>().ToList();
            <div class="form-group">
                <div class="row">
                    <div class="col-md-12">
                        <select id="storeId" name="storeId" class="form-control">
                            @foreach (BusinessBrand item in listOfBusinesses)
                            {
                                <option id="optionBrand-@item.Id" value="@item.Id" name="@item.Id">@(item.Brand.OfType<Brand>().FirstOrDefault().Name) @item.BusinessName @item.BusinessLocation</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            @* loops over all stores & uses js (scripts > actions > from.js) to decide which dropdown to show *@
            <div id="dropdowns">
                @foreach (BusinessBrand item in listOfBusinesses)
                {
                    <div id="modelSection-@item.Id" class="form-group model-section">
                        @Html.Partial("Modals/Shared/BrandDropdown", item.Brand.FirstOrDefault().OfType<Brand>().Modellen.ToList())
                    </div>
                }
            </div>
        }

        else if (Model.Page is BusinessBrand || Model.Page is Brand)
        {
            if (Model.Page is BusinessBrand)
            {
                modelNames = Model.Page.OfType<BusinessBrand>().Brand.OfType<Brand>().FirstOrDefault().Modellen.ToList();
            }
            else if (Model.Page is Brand)
            {
                modelNames = Model.Page.OfType<Brand>().Modellen.ToList();
            }
            <div class="form-group">
                @Html.Partial("Modals/Shared/BrandDropdown", modelNames)
            </div>
        }
        else if (Model.Page is Tweedehandswagen)
        {
            Model.ModelLink = Request.Url.ToString();
            var stringarray = Request.Url.Query.Replace('?', ' ').Split('-');
            @Html.HiddenFor(m => m.ModelLink)
            <input data-val="true" id="BusinessMailModal" name="BusinessMailModal" type="hidden" value="">
            <input type="hidden" name="ModelName" value="@($"{stringarray[0]}-{stringarray[1]}")" />
            <input class="location-hidden" type="hidden" name="SecondHandBusinessBrandNodeId" value="" />
            <input class="mail-to-hidden" type="hidden" name="MailTo" value="" />
            <input class="business-hidden" type="hidden" name="Business" value="" />
            <input class="car-model-hidden" type="hidden" name="CarModel" value="" />
            <input class="url-hidden" type="hidden" name="Url" value="" />
        }

        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control message_text remarksMinHeight", placeholder = "uw opmerkingen" })
                    @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div class="btn btn-send">
            <button id="btn-submit" type="submit" class="btn btn-primary">@FelixResources.general_completeAction</button>
        </div>
        <div class="btn btn-cancel">
            <a data-dismiss="modal" aria-label="Close">@FelixResources.general_cancel</a>
        </div>
    </div>
}